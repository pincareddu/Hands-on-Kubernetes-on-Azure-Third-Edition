# This is a basic workflow to help you get started with Actions

name: Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
    - Chapter15/**
    - .github/workflows/pipeline.yaml
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# Env to set reusable variables
env:
  ACRNAME: ffhandsonakspipeline
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git Checkout      
        uses: actions/checkout@v2
        
      - name: Azure Login
        uses: Azure/login@v1.4.1
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: ACR Login
        run: az acr login -n $ACRNAME
        
      - name: Build and Push image
        uses: docker/build-push-action@v2
        with: 
          context: ./Chapter15
          push: true
          tags: ${{ env.ACRNAME }}.azurecr.io/website/website:${{github.run_number }}
          
  CD:
    runs-on: ubuntu-latest
    needs: CI
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: rg-handsonaks
          cluster-name: handsonaks
      - name: Helm upgrade
        run: |
          helm upgrade website Chapter15/website --install \
          --set image.repository=$ACRNAME.azurecr.io/website/website \
          --set image.tag=${{github.run_number }}
      - name: Get service IP
        run: |
          PUBLICIP=""
          while [ -z $PUBLICIP ]; do
            echo "Waiting for a public IP..."
            PUBLICIP=$(kubectl get service website -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            [ -z "$PUBLICIP" ] && sleep 10
          done
          echo $PUBLICIP
